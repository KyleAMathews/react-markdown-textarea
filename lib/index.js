// Generated by CoffeeScript undefined
var React, Textarea, marked;

React = require('react/addons');

window.jQuery = window.$ = require('jquery');

Textarea = require('react-textarea-autosize');

marked = require('marked');

module.exports = React.createClass({
  getInitialState: function() {
    var state;
    state = {
      active: 'write'
    };
    if (this.props.value != null) {
      state.value = this.props.value;
    } else {
      state.value = "";
    }
    return state;
  },
  getDefaultProps: function() {
    return {
      buttonText: "Save",
      onSave: function(value) {
        return console.log(value);
      }
    };
  },
  toggleTab: function(e) {
    if (e.target.tagName !== "LI") {
      return;
    }
    if (e.target.className === "react-markdown-textarea__nav__item--active") {
      return;
    }
    if (this.state.active === "write") {
      return this.setState({
        active: 'preview'
      });
    } else {
      return this.setState({
        active: 'write'
      });
    }
  },
  handleChange: function(e) {
    return this.setState({
      value: this.refs.textarea.getDOMNode().value
    });
  },
  _onSave: function() {
    return this.props.onSave(this.state.value);
  },
  render: function() {
    var cx, liStyles, previewTabClasses, saveButton, tabs, textarea, textareaStyles, ulStyles, writeTabClasses;
    cx = React.addons.classSet;
    writeTabClasses = cx({
      'react-markdown-textarea__nav__item': true,
      'react-markdown-textarea__nav__item--active': this.state.active === "write"
    });
    previewTabClasses = cx({
      'react-markdown-textarea__nav__item': true,
      'react-markdown-textarea__nav__item--active': this.state.active === "preview"
    });
    ulStyles = {
      display: 'inline-block'
    };
    liStyles = {
      listStyle: 'none',
      float: 'left',
      cursor: 'pointer'
    };
    textareaStyles = {
      border: 'none',
      display: 'block',
      resize: 'none'
    };
    if (this.state.active === 'write') {
      textarea = this.transferPropsTo(Textarea({
        "className": "react-markdown-textarea__textarea-wrapper__textarea",
        "autosize": true,
        "onChange": this.handleChange,
        "ref": "textarea",
        "defaultValue": this.state.value,
        "style": textareaStyles
      }));
      saveButton = React.DOM.button({
        "onClick": this._onSave,
        "className": "react-markdown-textarea__textarea-wrapper__button"
      }, this.props.buttonText);
    } else {
      textarea = React.DOM.div({
        "className": "react-markdown-textarea__textarea-wrapper__preview",
        "style": {
          padding: '6.5px'
        },
        "dangerouslySetInnerHTML": {
          __html: marked(this.state.value)
        }
      });
    }
    if (!this.props.noPreview) {
      tabs = React.DOM.ul({
        "className": "react-markdown-textarea__nav",
        "onMouseDown": this.toggleTab,
        "style": ulStyles
      }, React.DOM.li({
        "className": writeTabClasses,
        "style": liStyles
      }, "Write"), React.DOM.li({
        "className": previewTabClasses,
        "style": liStyles
      }, "Preview"));
    }
    return React.DOM.div({
      "className": "react-markdown-textarea"
    }, tabs, React.DOM.div({
      "className": "react-markdown-textarea__textarea-wrapper"
    }, textarea, saveButton));
  }
});
